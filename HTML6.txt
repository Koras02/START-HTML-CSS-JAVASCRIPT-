지금까지 우리는 웹의 본질은 삳삳이 봄 

본질은 양과 조의 짝이고 혁신은 직업과 좋은짝이라새악ㄱ 


그래프를 볼때 그래프의 x축은 진도 
하나는 중요도 

진도가 나가설떄마다 집중도가 떨언다

처음에 배우는것은 모드든것의 공통 분모이고 뒤에서 배우는것은 특수한상황에 

유용한것 반면의 진도를 나아갈떄 난이도가 올라감 

이렇게 선을 그으니까 자연스럽게 교점을 발견하고 살펴보니까 교점을 중심으로 

앞쪽은 본질을 배우고 뒤쪽은 혁신을 배우는것은
앞쪽은 교양이고 뒤는 직업

교양은 쉽지만 중요한것 직업은 어렵지만 쉬운것을배우다

이것을 볼때 두개를 합칠수있다고 생각 

교양을 조금만 공부해도 할수있는게 많고 직업은 아무리 공부해도 높아지지않음


생각해보면 우리마음이 힘든것은교양이있을때 빠르게 높아지는 능력을 보지않고 낮은 상태의

능력을 보는것아닐까 또 직업을 볼떄 높아진 실력을 보지않고 느려진 실력의 향상속도 때문에 

아닌가?? 자괴감 소외감 불안함 이런감정도 실력향상에 도움됨 하지만 만족감 자신감 기대감 

이런 긍정적인것도 실력에 도움됨 부정과 긍정에 모두 공부가 된다면 부정적인 마음에 기대감
공부할필요가 있을까

뇌를 이길 것은 없다 뇌를 괴롭히면 빨리 성장하지만 오래 성공할수는없다

그럼어떻게?? 모르겠다 하지만 WEB!은 교양을 시작하는 사람은 출구 

직업을 위한사람은 입구 만약 코딩을 교양을 위해 시작했다면 공부를 내려놓고 일상으로 돌아가는것이 어떨가

느끼지 못할수있겠지만 우리에게는 조용한 혁명이 시작 이수업을 통해 코딩이 무엇인지 알게됬고 

정보기술이 어떻게 동작하는 지 충분히 알게됨.이제 우리는 사람이 잘하는 일과 기계가 잘하는 일을 분별하는것에

관심을 가졌기떄문 그중에 기계가 잘하는일을 사람이하고있다 할때 불편함이 느껴짐.불편함이 느껴질때 코딩을 다시시작하면된다.

코딩을 통해 문제로 자유러워진다면 인간적으로 집중할쑤있을것. 

지금은 공부를 하기도 좋을떄지만 공부를 멈추고 공부하기에 사용하는것도 좋음 

우리주변에는 눈에 보이는 복잡함이 있고 눙에 보이지않는 복잡함이있는데 

눈에 보이지않은 복잠하는 우리가 무엇을 할때 어떻게해야할지 막막함을 느끼게하는것 

checkbox.html을 만들어서 

<input type="checkbox"> 하면 화면에 체크박스가생김 그러면 

체크박스를 이용해 어떠한 앱을 만들엇다 쳐보자 

그럼 체크박스가 하나면 우리가만든 앱이 동작하는데 확인하려면 

몇번해야할까 2번 체크를 안한상태에서 태스트 

체크를 한상태에서 테스트를 해봐서 문제가 없는지 확인

그럼 체크박스가 두개면 몇번의 테스트가 필요할까

4번 체크가 안될때한번 두개일때한번 

하나가 체크될때 다른 하나가 체크될때

체크박스가 3개면 ?8번 

1번에체크1번 123번 체크 3번 2번 체크 4번 3번 체크 총 5번 

1번2번체크 6번 2번3번체크 7번 3번 1번 8번 이필요 

그럼 만약에 체크박스가 50개라면 몇번의 테스크가 

필요할까 직관적으로 살펴보자. 수학적으로는 

2를 50번 곱하면 우리가 원하는 값이 나눔 즉 2의 50승 

2의 50승을 실제로 얼마일까 1000조이다 

체크박스가 50게면 1000조의 경우의수가 생김

우리주변에는 체크박스 50개보다 복잡한 앱들이 얼마나 많나 

세상은 우리와 다르게 쉡게 복잡 

눈에는 체크박스 50개가 보여서 쉽게 보이지만 

실제로 눈에 보이지않은 1000조가지의 경우의수가 숨어있을떄

테스트 해보지 못한 경우에서 예상치못한 버그들이 생겨남

또 작은 기능을 추가하는 것도 나중에는 어렵게 되면서

깊은 슬럼프에 빠지게되는것 

이복잡함은 눈에 보이지 않기 때문에 자연스럽게

좌절감의 원인을숨어있는 복잡함 때문이 아니라

자기의 탓으로 돌리게됨 겨우 50개밖에 되지않은 

단순한 프로그램도 못만드는 사람이라고 스스로 여기게 됨 

원래그렇다 공부다 마찬가지 개념을 알게 된다는 것은 말하자면 

체크박스가 늘어난다는것 자연스럽게 자신도 모르게 머리속이 

기하급수적으로 복잡해짐 그럼 이복잠합은 나쁜것인가/그렇지않다

오히려 인류는 눈에보이는 단순함을 조작해서 눈에 보이지 않은 엄청나게 복잡한것을 

만들어 내는 위대한 존재이다 그위대함의 사례

영어를 공부했는데 스스로의 영어에 능숙하다고 생각하지않았.

아시다시피 영어는 주어동사 목적어의 순서대로 단어들을 배치해서 

의미를 만들어냄. 아이들은 어떻게 언어를 익히는가를 생각해보았다. 

아이들은 명사만으로 대화를 하는데 예를테면 '엄마''아빠''밥'이렇게 

아이가 명사를 10개안다면 아이는 10개의 의미를 만들수있음 1000개의 의미를 말하라면 

천개의 단어를 알아야함 그랬던 아이가 나이를 조금 들면 동사(verb)를 사용할수있게됨 

명사를 앞에두고 동사를 뒤에둬 말을 하게됨 그럼 명사 10개와 동사 10개로 만들수 있는 의미의 경우의 수를 따저보면 

20개의 단어로 100개의 의미를 만들수있음 80개가 이득 좀더 나이가 들어 동사뒤에 이제 명사를 배치해서 

더복잡한 말을 만들기 시작 동사 앞의 명사와 동사 뒤의 명사를 구분하기 위해서 문법적으로는 앞에 있는것을 주어 

뒤에있는것을 목적어라고함 그럼 주어 자리에 명사 10개 동사 10개 목적어 자리에 이미 알고있는 명사 10개를 

사용하면 그럼 20개의 단어로 1000개의 의미를 만들수 있음 980개가 이득임.뭐 여기다 전치사 같은 문법을 

추가한다면 30개의 단어로 10만개의 의미를 만들수있음. 이렇게 문법이 조금만 복잡해져도 이득은 

천문학적으로 커진다. 즉 주어-동사-목적어 라는 어순만으로도 우리는 엄청나게 많은 의미를 쏟아 낼수 있음.

이렇게 간단한 문법이 이렇게 대단한 도구라는 것을 알았다면 이것들만 가지고 의미를 만들어 보는 연습을 충분히 했을것 

그런데 이렇게 중요한 도구의 사용에 충분히 익숙해지기도 전에 더 복잡한 문법을 배우다보니 머리속이 복잡해져서

한마디도 할수없게 되었다.지금까지 배운내용을영어로치면 주어동사 목적어와 같이 혁명적인 것이였다.

웹이 웹이기 위해서 필요한 모든것을 알게됨 덜아름답고, 덜 편리하고,덜 생산적일 뿐이다.그럼어떻할까

진도를 멈추고 지금까지 배운것을 이용해서 삶에서 정말 중요한 정보를 정리정도하자.그것이 인생에 중요한 것일수록 

여러가지 불만 족이 쏟아저 나온다.더이쁘게 만들수도 있고 더 편리하게 만들수도있다.또 더생산정으로 웹페지를 만들수있음 

중요한것은 이런 불만족들을 자기 눈을 직접확인하는것 그래야 부분 학습을 할수있음 또 그 불만감이 누적되서 절망감이 

높아져야함 그래야 공부가 우리의 문제를 해결해주는 구원자가됨 바로 이때가 진도를 나아가야할 때 더빨라저도 

늦어져도 안된다. 절망감이 클수록 극복해낼때 성취감이 커진다.

이제 본질에서 벗어나서 혁신을 향해서 나아가자.이수업은 학습에 주인공이되어서 공부의 방향을 스스로 선택하는데 

도움을 주기위한 수업 정보의 효용은 최소한으로 배워 최대한으로 써먹을때 들어난다.최대한으로 배워서 

최소한으로 써먹지 않기를...공부와 멀어지는 지름길일뿐.지금부터 진로에 대해 곰곰히 따져보자 만약 웹사이트를 아름답게 하고싶다면 

CSS를 공부해야함 CSS는 HTML이 태어난지 약 4년 후 태어남 언어가 나타날때 web publisher webdesigner 가 나타나게됨 
css를 공부하려면 web2 -css 만약 사용자와 상용하는 웹을 만들려면 javascript를 공부해야함

javascript는 HTML이 태어난지 5년 후로부터 만들어짐 이언어가 나타나고 

Web front end disinger 웹 인터렉티브 디자이너 라는 직업이 발전하게됨 javscript를 공부하려면 web2-javascript를 공부

만약 1억개의 웹사이트를 운영한다 치고 어떤이유로 웹사이트에 있는 웹페이지에서 h1태그를 h2태그로 바꿔야한다면 

1억개의 웹페이지를 변경해야함 하나의 페이지를 변경하는데 0.1초가 걸린다해도 1억개면 115일 이걸림 

즉 생산성에 한개에 봉착하는것. 이 한계를 극복하기 위해서는 '백 엔드(back end)'기술을 배워야함 

백엔드 기술을 이용하면 하나의 파일을 변경하면 1억개의 웹페이지가 동시에 바뀌는 폭발적인 효과를 경험할수 있다.

php,jsp,node.js에 익스프레스 python의 장고 ruby의 ruby on rails asp 닷넷 이런기술들이  이런목적을 위해서 고안된기술

그리고 이기술은 서로 경쟁관계에 있어서 하나를 공부하면됨 이런 기술자들을 백엔드라고 불림 백엔드를 배우려면 web-2 php web2-jsp를 배우면됨 

만약에 웹사이트를 통해 돈을 벌고싶다면 광고의 노출에 따라 돈을 벌수있음 이러러면 web2-광고를 배우면됨 

그렇다면 web-2중에 하나를 공부하면됨 웹프로젝트에서 가장 중요하게 생각하는것은 누구나 web-1을 기반으로 

새롭게 만들수있다 이렇게해서 web-1은 공공재로 만들었다.알고있는 것을 공고히하는 두가지 

하나는 알고있는 지식으로 프로젝트 하나는 알고있는 지식을 다른사람에게 알려주는것 둘다 자신이 무엇을 알고있는지

자신과 타인에게 확인 시켜주는 너무나 중요한 방법이다.

